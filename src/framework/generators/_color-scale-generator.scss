// ===================================================
// Color Scale Generator
// ===================================================

// Build a Set of Colors based on the Color-Scale Function
//
// @requires color-scale()
//
// @param  {map}    $o           - Setup Vars
//         {list}   $o.color     - Color Values [#000 #000]
//         {number} $o.steps     - Number off steps to reach the other color [5]
//         {*}      $o.attribute - Attribute [background-color]
//         {bool}   $o.extend    - For extending the classes with other Classes [false]
@mixin color-scale-generator($o: ()) {

  // Setup
  $o: map-merge((
    color: #000 #000,
    steps: 5,
    attribute: background-color,
    extend: false
  ), $o);

  // Mixin need min two step values
  @if map-get($o, steps) > 1 {

    // Build a Color List
    $cs: color-scale(map-get($o,color), map-get($o,steps));

    // Generate the Classes
    @for $i from 1 through (length($cs)) {

      &#{map-get($kittn-bem, modifier)}#{$i - 1} {
        // Include the Attribute
        #{map-get($o, attribute)}: nth($cs,$i);

        // When the Classes need to be Extended
        @if map-get($o, extend) {
          @extend #{map-get($o, extend)};
        }
      }
    }
  } @else {
    @warn 'A Color-Scale need more than one steps value.';
  }
}
